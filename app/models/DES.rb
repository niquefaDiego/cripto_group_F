class DES 
    
    def self.encrypt(s,key)
        key = key.to_i(16).to_s(2)
        if s.size % 8  != 0
            s += "\0" * (s.size % 8)
        end

        a = ""

        for j in 0..(s.size / 8 -1 )

            s_bin = ""
            for i in s[(j*8)..(j*8+7)].split('')
                s_bin += i.ord.to_s(2).rjust(8,'0') 
            end
            a += encrypt_64(s_bin, key)
        end

        return a
    end

    def self.encrypt_64(m, key)
        k = []
        k.append(permutation(key.rjust(64,'0'),1))
        c = Array.new #izquierda
        d = Array.new #derecha
        c.append(k[0][0..27])
        d.append(k[0][28..55])
        for i in 0..15
            c_temp = c[-1][NS[i]..-1] + c[-1][0..(NS[i]-1)]
            d_temp = d[-1][NS[i]..-1] + d[-1][0..(NS[i]-1)]
            c.append(c_temp)
            d.append(d_temp)
        end
        for i in 1..16
            k.append(permutation(c[i]+d[i],2))
        end 
        ip = permutation(m,3)
        l = [ip[0..31]]
        r = [ip[32..-1]]
        
        for i in 1..16
            l.append(r[-1])
            r.append(s_xor(l[-2],f(r[-1],k[i])))
        
        end

        return (r[-1] + l[-1]).to_i(2).to_s(16)


    end

    def self.decrypt( s,  key)
        return "supongamos que esta funcionando"
    end

    def self.s_xor(b1,b2)
        ans = ""
        for i in 0..(b1.length-1)
            ans += (b1[i]==b2[i]? "0": "1")
        end
        return ans
    end


    def self.f(r,k)
        tmp = s_xor(permutation(r,4),k)
        ans = ""
        for i in 0..7
            ans += S_BOX[i][16 * (tmp[6*i]+tmp[6*i+5]).to_i(2) + tmp[6*i+1..6*i+4].to_i(2)].to_s(2).rjust(4,'0')
        end
        return permutation(ans,5)
    end
    
    def self.permutation(s, n_p)
        p = ""
        chars = s.split('')
        for i in PC[n_p]
            p += chars[i-1]
        end
        return p
    end

    NS = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]

    S_BOX = [
        [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
    0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
    4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
    15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13
    ],
    [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
    3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
    0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
    13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9
    ],
    [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
    13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
    13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
    1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12
    ],
    [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
    13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
    10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
    3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14
    ],
    [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
    14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
    4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
    11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3
    ],
    [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
    10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
    9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
    4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13
    ],
    [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
    13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
    1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
    6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12
    ],
    [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
    1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
    7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
    2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11
    ]    
    ]

    
    PC =[ 0 , [
        57,49, 41,33, 25, 17, 9,
        1,58, 50,42, 34, 26,18,
        10, 2, 59,51, 43, 35,27,
        19,11,  3,60, 52, 44,36,
        63,55, 47,39, 31, 23,15,
        7,62, 54,46, 38, 30,22,
        14, 6, 61,53, 45, 37,29,
        21,13,  5,28, 20, 12, 4
        ] ,
    [
         14 ,17,11 ,24 , 1 ,5 ,
        3 ,   28,   15,  6 ,21,   10,
        23 ,19,12 , 4, 26, 8,
        16 , 7,27 ,20, 13, 2,
        41 ,52,31 ,37, 47,55,
        30 ,40,51 ,45, 33,48,
        44 ,49,39 ,56, 34,53,
        46 ,42,50 ,36, 29,32 
    ],
    [
        58,50,42,34,26,18,10,2,
        60,52,44,36,28,20,12,4,
        62,54,46,38,30,22,14,6,
        64,56,48,40,32,24,16,8,
        57,49,41,33,25,17,9,1,
        59,51,43,35,27,19,11,3,
        61,53,45,37,29,21,13,5,
        63,55,47,39,31,23,15,7
    ],
    [   32,1,2,3,4,5,
        4,5,6,7,8,9,
        8,9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32,1
    ],
    [   16,7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2,8,24,14,
        32,27,3,9,
        19,13,30,6,
        22,11,4,25
]
] # 1 -> pc1, 2 -> pc2, 3 -> ip, 4 -> E-bit, 5 -> P 
end

